;;; -*- Mode: LISP; slime-proxy-proxy-connection: t -*-
(in-package :ps)

;;; Variables and constants
(defvar *canvas*)
(defvar *context*)
(defvar *map*)
(defvar *turn*)
(defvar *city*)
(defvar *home*)
(defvar *chickens-placed*)
(defvar *transport*)
(defvar *inventory*)

(defvar +colors+
  '((:grass-1 "#180")
    (:grass-2 "#291")
    (:grass-3 "#3C2")
    (:grass-4 "#190")
    (:grass-5 "#5D3")
    (:mud-1 "#531")
    (:mud-2 "#543")
    (:mud-3 "#364")
    (:city "#00F")
    (:home "#F00")))
(defvar +transports+
  '(("Bicycle" 10)
    ("Motorcycle" 20)
    ("Mini" 40)
    ("Car" 60)
    ("Van" 100)
    ("Truck" 200)
    ("Jet" 300)
    ("Cargo plane" 500)))
(defvar +tile-size+ 20)
(defvar +initial-money+ 100)
(defvar +initial-chickens+ 0)
(defvar +initial-transport+ (first (first +transports+)))
(defvar +city-factor+ 0.005)
(defvar +earn-ratio+ 0.3)
(defvar +price-variation-ratio+ 0.2)

;;; Utils
(defun first (l)
  (elt l 0))
(defun second (l)
  (elt l 1))

(defun assoc (val list)
  ((@ list reduce)
   (lambda (last x)
     (if (and (not last) (= (first x) val))
         (second x)
         last))
   nil))

(defun mapcar (fun &rest as)
  (let ((result-array (make-array)))
    (if (= 1 (length as))
        (dolist (element (aref as 0))
          ((@ result-array push) (fun element)))
        (dotimes (i (length (aref as 0)))
          (let ((args-array (mapcar (lambda (a) (return (aref a i))) as)))
            ((@ result-array push) (fun.apply fun args-array)))))
    (return result-array)))

(defun get-time ()
  ;; The - before date is necessary here to have a capital in compiled code
  (let* ((date (new -date))
         (hours ((@ date get-hours)))
         (minutes ((@ date get-minutes)))
         (seconds ((@ date get-seconds))))
    (stringify
     (when (< hours 10) "0") hours ":"
     (when (< minutes 10) "0") minutes ":"
     (when (< seconds 10) "0") seconds)))

;;; Turns
(defun next-turn ()
  (let ((gain (floor (* *chickens-placed* +earn-ratio+))))
    (setf *turn* (+ *turn* 1))
    (earn gain)
    (message "Starting turn " *turn* ", you earned " gain)
    (update-static-actions)
    (display-infos)))

(defun init-turns ()
  (setf *turn* 0))

;;; Actions and messages
(defun clear-actions ()
  ((@ ($ "#actions") html) ""))

(defun add-action (id name fun &optional (type "#actions"))
  ((@ ($ type) append)
   (stringify
    (ps-html ((:input :type "button" :id id :value name)))
    "<br/>"))
  ((@ ($ (stringify "#" id)) click) fun))

(defun add-number-action (id name fun &optional (type "#actions"))
  (let ((text-id (stringify id "-text")))
    ((@ ($ type) append)
     (stringify
      (ps-html ((:input :type "text" :id text-id :value 0)))
      (ps-html ((:input :type "button" :id id :value name)))
      "<br/>"))
    ((@ ($ (stringify "#" id)) click)
     (lambda ()
       (let ((n (parse-int ((@ ($ (stringify "#" text-id)) val)))))
         (when n ;; Don't call if zero or not a number
           (fun n)))))))

(defun init-messages (str)
  ((@ ($ "#messages") html) ""))

(defun message (&rest strs)
  ((@ ($ "#messages") prepend)
   (stringify (get-time) "> " ((@ strs join) "") "<br/>")))

(defun update-static-actions ()
  ((@ ($ "#static-actions") html) "")
  (add-action "new" "New Game"
              (lambda ()
                (message "New game started")
                (init-game))
              "#static-actions")
  (unless (= *city* *home*)
    (when (transport-available)
      (let ((transport (random-transport)))
        (add-action "buy-transport" (stringify "Buy a " transport
                                               " (" (transport-price transport)
                                               ")")
                    (lambda ()
                      (when (pay (transport-price transport))
                        (message "You just bought a " transport)
                        (setf *transport* transport)
                        (update-static-actions)))
                    "#static-actions")))
    (add-number-action "buy-chickens" "Buy chickens"
                       (lambda (n)
                         (when (buy-chickens 1 n)
                           (message "Bought " n " chickens at " (@ *city* name))))
                       "#static-actions")
    (add-number-action "sell-chickens" "Sell chickens"
                       (lambda (n)
                         (when (sell-chickens 1 n)
                           (message "Sold " n " chickens at " (@ *city* name))))
                       "#static-actions")))

;;; Inventory
(defun init-inventory ()
  ;; We have to initialize at least one value
  (setf *inventory* (make-array))
  (setf (@ *inventory* "foo") 0))

(defmacro inventory-add (type number)
  `(if (in ,type *inventory*)
       (incf (@ *inventory* ,type) ,number)
       (setf (@ *inventory* ,type) ,number)))

(defmacro inventory-get (type)
  `(@ *inventory* ,type))

(defmacro inventory-remove (type number
                            &optional (error-message
                                       (stringify "You don't have enough "
                                                  type " in your inventory")))
  `(if (or (not (in ,type *inventory*))
           (> ,number (inventory-get ,type)))
       (progn
         (message error-message)
         false)
       (decf (@ *inventory* ,type) ,number)))

;;; Money
(defun pay (price)
  (if (> price (inventory-get :money))
      (progn
        (message "You can't afford that !")
        false)
      (progn
        (inventory-remove :money price)
        (display-infos)
        t)))

(defun earn (money)
  (inventory-add :money money))

(defun price-variation (price)
  (let ((variation (random (* price +price-variation-ratio+))))
    (if (= (random 2) 1)
        (+ price variation)
        (- price variation))))

(defun init-money ()
  (inventory-add :money +initial-money+))

;;; Transports
(defun transport-size (transport)
  (assoc transport +transports+))

(defun transport-price (transport)
  (price-variation (assoc transport +transports+)))

(defun transport-available ()
  (= (random 2) 1))

(defun random-transport ()
  (first (random-element +transports+)))

(defun init-transports ()
  (setf *transport* +initial-transport+))

;;; Chickens
(defun get-chickens ()
  (inventory-get :chickens))

(defun enough-room-p (number)
  (if (> (+ (get-chickens) number)
           (transport-size *transport*))
      (progn
        (message "Not enough room for " number " chickens")
        (return false))
      t))

(defun buy-chickens (price number)
  (if (and (enough-room-p number)
           (pay (* price number)))
      (progn (inventory-add :chickens number)
             (display-infos))
      false))

(defun remove-chickens (number)
  (if (> number (get-chickens))
      (progn
        (message "Not enough chickens")
        false)
      t))

(defun sell-chickens (price number)
  (if (remove-chickens number)
      (progn
        (earn (* price number))
        (inventory-remove :chickens number)
        (display-infos))
      false))

(defun put-chickens (number tile)
  (if (remove-chickens number)
      (progn
        (tile-set-chickens tile (+ (tile-chickens tile) number))
        (inventory-remove :chickens number)
        (incf *chickens-placed* number)
        (display-infos))
      false))

(defun take-chickens (number tile)
  (if (> number (tile-chickens tile))
      (progn
        (message "Not enough chickens")
        false)
      (progn
        (if (enough-room-p number)
            (progn
              (tile-set-chickens tile (- (tile-chickens tile) number))
              (inventory-add :chickens number)
              (decf *chickens-placed* number)
              (display-infos))
            false))))

(defun init-chickens ()
  (inventory-add :chickens +initial-chickens+)
  (setf *chickens-placed* 0))

;;; Tiles
(defun random-tile ()
  (create type "tile"
          :tiletype (first (elt +colors+ (random (- (@ +colors+ length) 2))))
          :owned false
          :city false
          :chickens 0))

(defun tile-color (tile)
  (assoc (tile-type tile) +colors+))

(defun tile-type (tile)
  (@ tile tiletype))

(defun tile-set-type (tile type)
  (setf (@ tile tiletype) type))

(defun tile-owned-p (tile)
  (@ tile owned))

(defun tile-set-owned (tile &optional (status t))
  (setf (@ tile owned) status))

(defun tile-city (tile)
  (@ tile city))

(defun tile-set-city (tile city)
  (setf (@ tile city) city))

(defun tile-chickens (tile)
  (@ tile chickens))

(defun tile-set-chickens (tile number)
  (setf (@ tile chickens) number))

(defun tile-position (pos)
  (floor (/ pos +tile-size+)))

(defun draw-tile (tile x y)
  (let* ((left (* x +tile-size+)) (right (+ left +tile-size+))
         (top (* y +tile-size+)) (bottom (+ top +tile-size+)))
    (setf (@ *context* fill-style) (tile-color tile))
    ((@ *context* fill-rect) left top right bottom)
    (when (tile-owned-p tile)
      (setf (@ *context* stroke-style) "#F00")
      ((@ *context* begin-path))
      ((@ *context* move-to) left top)
      (mapcar (lambda (x y) ((@ *context* line-to) x y))
              (list left right right left left)
              (list top top bottom bottom top))
      ((@ *context* stroke)))))

(defun tile-handle-click (tile map x y)
  (clear-actions)
  (case (tile-type tile)
    ((:grass-1 :grass-2 :grass-3 :grass-4 :grass-5 :mud-1 :mud-2 :mud-3)
     (when (= *city* *home*)
       (when (tile-owned-p tile)
         (add-action "sell" "Sell at 10"
                     (lambda ()
                       (earn 10)
                       (message "Sold field")
                       (tile-set-owned tile false)
                       (redraw)
                       (clear-actions)))
         (add-number-action "put" "Put chickens"
                            (lambda (n)
                              (when (put-chickens n tile)
                                (message "Placed " n " chickens")
                                (clear-actions))))
         (add-number-action "take" (stringify "Take chickens (max: "
                                              (tile-chickens tile) ")")
                            (lambda (n)
                              (when (take-chickens n tile)
                                (message "Taken " n " chickens")
                                (clear-actions)))))
       (when (can-buy-field map x y)
         (add-action "buy" "Buy (costs 10)"
                     (lambda ()
                       (when (pay 10)
                         (message "Buying field")
                         (tile-set-owned tile x y)
                         (redraw))
                       (clear-actions))))))
    (:home
     (unless (= *city* *home*)
       (add-action "go" "Go home"
                   (lambda ()
                     (go-to *home*)
                     (clear-actions)))))
    (:city
     (let ((city (tile-city tile)))
       (unless (= *city* city)
         (add-action "go" (stringify "Go to " (@ city name))
                     (lambda ()
                       (go-to city)
                       (clear-actions))))))))

;;; Cities
(defun make-city (x y)
  (create type "city" :name (make-city-name) :x x :y y))

(defun check-adjacent-cases (fun map x y)
  (try
   (progn
     (dolist (pos-x (list (- x 1) x (+ x 1)))
       (dolist (pos-y (list (- y 1) y (+ y 1)))
         (when (and (not (and (= pos-x x) (= pos-y y)))
                    (>= pos-x 0) (>= pos-y 0)
                    (< pos-x (map-width map))
                    (< pos-y (map-height map)))
           (unless (fun pos-x pos-y)
             (throw "end")))))
     true)
   (:catch (error)
     (return false))))

(defun can-place-city (map x y)
  (flet ((check (x y)
           (if (and (>= x 0) (>= y 0)
                    (< x (map-width map)) (< y (map-height map)))
               (not (= (map-tile-type map x y) :city)))))
    (and (not (= (map-tile-type map x y) :city))
        (check-adjacent-cases check map x y))))

(defun can-buy-field (map x y)
  (and
   (not (map-owned-p map x y))
   (not (check-adjacent-cases (lambda (x y)
                                (not
                                 (or (= (map-tile-type map x y) :home)
                                     (map-owned-p map x y))))
                              map x y))))

(defun add-cities (map)
  (labels ((helper (n)
             (when (>= n 0)
               (let ((x (random (map-width map)))
                     (y (random (map-height map))))
                 (if (can-place-city map x y)
                     (progn
                       (map-set-city map x y (make-city x y))
                       (helper (- n 1)))
                     (helper n))))))
    (helper (floor (* +city-factor+ (map-width map) (map-height map))))))

(defun add-home (map)
  (labels ((helper ()
             (let ((x (random (map-width map)))
                   (y (random (map-height map))))
               (if (can-place-city map x y)
                   (progn
                     (setf *home* (create type "home" :name "Home" :x x :y y))
                     (map-set-home map x y))
                   (helper)))))
    (helper)))

(defun go-to (city)
  (if (= city *home*)
      (message "Home sweet home")
      (message "Going to " (@ city name)))
  (setf *city* city)
  (display-infos)
  (next-turn))

(defun init-cities ()
  (add-home *map*)
  (setf *city* *home*))

;;; Maps
(defun make-map (w h)
  (let ((contents (make-array)))
    (dotimes (x w)
      (setf (aref contents x) (make-array))
      (dotimes (y h)
        (setf (aref contents x y) (random-tile))))
    (create type "map"
            :width w :height h
            :contents contents)))


(defun new-map ()
  (let ((map
         (make-map (/ ((@ *canvas* width)) +tile-size+)
                   (/ ((@ *canvas* height)) +tile-size+))))
    (add-cities map)
    map))

(defun map-width (map)
  (@ map width))

(defun map-height (map)
  (@ map height))

(defun map-tile-at (map x y)
  (aref (@ map contents) x y))

(defun map-set-home (map x y)
  (map-set-tile-type map x y :home))

(defun map-set-city (map x y city)
  (tile-set-city (map-tile-at map x y) city)
  (map-set-tile-type map x y :city))

(defun map-city (map x y)
  (tile-city (map-tile-at map x y)))

(defun map-set-owned (map x y &optional (status t))
  (tile-set-owned (map-tile-at map x y) status))

(defun map-owned-p (map x y)
  (tile-owned-p (map-tile-at map x y)))

(defun map-set-tile-type (map x y type)
  (tile-set-type (map-tile-at map x y) type))

(defun map-tile-type (map x y)
  (tile-type (map-tile-at map x y)))

(defun map-foreach (f map)
  (dotimes (x (map-width map))
    (dotimes (y (map-height map))
      (f x y))))

(defun draw-map (map)
  (map-foreach (lambda (x y)
                 (draw-tile (map-tile-at map x y) x y))
               map))

(defun init-map ()
  (setq *map* (new-map))
  t)

;;; Game
(defun handle-click (x y)
  (tile-handle-click (map-tile-at *map* x y) *map* x y))

(defun clear ()
  ((@ *context* clear-rect) 0 0 ((@ *canvas* width)) ((@ *canvas* height)))
  ((@ ($ "#infos") html) ""))

(defun display-infos ()
  ((@ ($ "#infos") html) (stringify "Money: " (inventory-get :money) " - "
                                    "Turn: " *turn* " - "
                                    "Chickens: " (inventory-get :chickens) "/"
                                    (transport-size *transport*) " - "
                                    "Chickens placed: " *chickens-placed* " - "
                                    "Transport: " *transport* " - "
                                    "Location: " (@ *city* name))))

(defun pre-init ()
  ((@ *canvas* click)
   (lambda (e)
     (handle-click
      (tile-position (- (@ e page-x) (@ this offset-left)))
      (tile-position (- (@ e page-y) (@ this offset-top)))))))

(defun redraw ()
  (clear)
  (display-infos)
  (draw-map *map*))

(defun init-game ()
  (init-messages)
  (init-inventory)
  (init-money)
  (init-turns)
  (init-chickens)
  (init-transports)
  (init-map)
  (init-cities)
  (clear-actions)
  (redraw))

(defun init ()
  (setq *canvas* ($ "#canvas"))
  (setq *context* ((@ (getprop *canvas* 0) get-context) "2d"))
  (pre-init)
  (clear)
  (clear-actions)
  (update-static-actions))
